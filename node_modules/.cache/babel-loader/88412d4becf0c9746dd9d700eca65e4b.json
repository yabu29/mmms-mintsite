{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      const blockchain = store.getState().blockchain;\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      let userMintedAmount = await store.getState().blockchain.smartContract.methods.getUserMintedAmount(blockchain.account).call();\n      let paused = await store.getState().blockchain.smartContract.methods.paused().call();\n      let onlyAllowlisted = await store.getState().blockchain.smartContract.methods.onlyAllowlisted().call();\n      let maxMintAmountPerTransaction = await store.getState().blockchain.smartContract.methods.maxMintAmountPerTransaction().call();\n      let mintCount = await store.getState().blockchain.smartContract.methods.mintCount().call();\n      let publicSaleMaxMintAmountPerAddress = await store.getState().blockchain.smartContract.methods.publicSaleMaxMintAmountPerAddress().call();\n      let allowlistUserAmount = await store.getState().blockchain.smartContract.methods.getAllowlistUserAmount(blockchain.account).call();\n      let allowlistType = await store.getState().blockchain.smartContract.methods.allowlistType().call();\n      dispatch(fetchDataSuccess({\n        totalSupply,\n        userMintedAmount,\n        paused,\n        onlyAllowlisted,\n        maxMintAmountPerTransaction,\n        mintCount,\n        publicSaleMaxMintAmountPerAddress,\n        allowlistUserAmount,\n        allowlistType\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","blockchain","getState","totalSupply","smartContract","methods","call","userMintedAmount","getUserMintedAmount","account","paused","onlyAllowlisted","maxMintAmountPerTransaction","mintCount","publicSaleMaxMintAmountPerAddress","allowlistUserAmount","getAllowlistUserAmount","allowlistType","err","console","log"],"sources":["/Users/yabuch/Desktop/オムニMMMS/shigo-gene-main/shigo_gene_minting_dapp/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n\n      const blockchain = store.getState().blockchain\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      let userMintedAmount = await store.getState().blockchain.smartContract.methods.getUserMintedAmount(blockchain.account).call()\n      let paused = await store.getState().blockchain.smartContract.methods.paused().call();\n      let onlyAllowlisted = await store.getState().blockchain.smartContract.methods.onlyAllowlisted().call()\n      let maxMintAmountPerTransaction = await store.getState().blockchain.smartContract.methods.maxMintAmountPerTransaction().call();\n      let mintCount = await store.getState().blockchain.smartContract.methods.mintCount().call()\n      let publicSaleMaxMintAmountPerAddress = await store.getState().blockchain.smartContract.methods.publicSaleMaxMintAmountPerAddress().call()\n      let allowlistUserAmount = await store.getState().blockchain.smartContract.methods.getAllowlistUserAmount(blockchain.account).call()\n      let allowlistType = await store.getState().blockchain.smartContract.methods.allowlistType().call()\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply,\n          userMintedAmount,\n          paused,\n          onlyAllowlisted,\n          maxMintAmountPerTransaction,\n          mintCount,\n          publicSaleMaxMintAmountPerAddress,\n          allowlistUserAmount,\n          allowlistType,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;EACpC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;EACnC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAG,MAAM;EAC7B,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;IACA,IAAI;MAEF,MAAMO,UAAU,GAAGR,KAAK,CAACS,QAAN,GAAiBD,UAApC;MACA,IAAIE,WAAW,GAAG,MAAMV,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDF,WAAlD,GAAgEG,IAAhE,EAAxB;MACA,IAAIC,gBAAgB,GAAG,MAAMd,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDG,mBAAlD,CAAsEP,UAAU,CAACQ,OAAjF,EAA0FH,IAA1F,EAA7B;MACA,IAAII,MAAM,GAAG,MAAMjB,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDK,MAAlD,GAA2DJ,IAA3D,EAAnB;MACA,IAAIK,eAAe,GAAG,MAAMlB,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDM,eAAlD,GAAoEL,IAApE,EAA5B;MACA,IAAIM,2BAA2B,GAAG,MAAMnB,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDO,2BAAlD,GAAgFN,IAAhF,EAAxC;MACA,IAAIO,SAAS,GAAG,MAAMpB,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDQ,SAAlD,GAA8DP,IAA9D,EAAtB;MACA,IAAIQ,iCAAiC,GAAG,MAAMrB,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDS,iCAAlD,GAAsFR,IAAtF,EAA9C;MACA,IAAIS,mBAAmB,GAAG,MAAMtB,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDW,sBAAlD,CAAyEf,UAAU,CAACQ,OAApF,EAA6FH,IAA7F,EAAhC;MACA,IAAIW,aAAa,GAAG,MAAMxB,KAAK,CAACS,QAAN,GAAiBD,UAAjB,CAA4BG,aAA5B,CAA0CC,OAA1C,CAAkDY,aAAlD,GAAkEX,IAAlE,EAA1B;MAEAN,QAAQ,CACNJ,gBAAgB,CAAC;QACfO,WADe;QAEfI,gBAFe;QAGfG,MAHe;QAIfC,eAJe;QAKfC,2BALe;QAMfC,SANe;QAOfC,iCAPe;QAQfC,mBARe;QASfE;MATe,CAAD,CADV,CAAR;IAaD,CA1BD,CA0BE,OAAOC,GAAP,EAAY;MACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAlB,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;IACD;EACF,CAhCD;AAiCD,CAlCM"},"metadata":{},"sourceType":"module"}