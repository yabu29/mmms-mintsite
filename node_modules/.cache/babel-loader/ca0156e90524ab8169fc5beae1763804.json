{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n\nvar AccessListEIP2930Transaction =\n/** @class */\nfunction (_super) {\n  __extends(AccessListEIP2930Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function AccessListEIP2930Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a, _b;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n\n    _this.DEFAULT_HARDFORK = 'berlin';\n    var chainId = txData.chainId,\n        accessList = txData.accessList,\n        gasPrice = txData.gasPrice;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN(); // EIP-2718 check is done in Common\n\n    if (!_this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n\n    _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]); // Populate the access list fields\n\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice === '' ? '0x' : gasPrice));\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      throw new Error('The y-parity of the transaction should either be 0 or 1');\n    }\n\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function () {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function () {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function () {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n  AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new AccessListEIP2930Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n\n\n  AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized.slice(0, 1).toString('hex'));\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n   */\n\n\n  AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n\n\n  AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n\n    var _a = __read(values, 11),\n        chainId = _a[0],\n        nonce = _a[1],\n        gasPrice = _a[2],\n        gasLimit = _a[3],\n        to = _a[4],\n        value = _a[5],\n        data = _a[6],\n        accessList = _a[7],\n        v = _a[8],\n        r = _a[9],\n        s = _a[10];\n\n    var emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getDataFee = function () {\n    var cost = _super.prototype.getDataFee.call(this);\n\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId), ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.accessList, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceeding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var base = this.raw().slice(0, 8);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n\n    if (hashMessage) {\n      return ethereumjs_util_1.keccak256(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  AccessListEIP2930Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      throw new Error('Cannot call hash method if transaction is not signed');\n    }\n\n    return ethereumjs_util_1.keccak256(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      throw new Error('Cannot call this method if transaction is not signed');\n    }\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        yParity = _b.yParity,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\n      ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n\n  AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  AccessListEIP2930Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: ethereumjs_util_1.bnToHex(this.chainId),\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n\n  return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = AccessListEIP2930Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","TRANSACTION_TYPE_BUFFER","Buffer","from","toString","padStart","__extends","txData","opts","_super","type","_this","accessList","gasPrice","common","_getCommon","chainId","chainIdBN","isActivatedEIP","Error","activeCapabilities","concat","accessListData","util_1","getAccessListData","AccessListJSON","verifyAccessList","ethereumjs_util_1","_validateCannotExceedMaxInteger","v","eqn","gteHardfork","s","_a","gt","types_1","freeze","_b","Object","AccessListEIP2930Transaction","r","serialized","slice","equals","values","decode","Array","isArray","fromValuesArray","fromSerializedTx","length","nonce","gasLimit","to","value","data","emptyAccessList","undefined","cost","getDataFee","call","iaddn","getDataFeeEIP2930","mul","add","buf","base","raw","encode","hashMessage","message","isSigned","serialize","getMessageToSign","msgHash","getMessageToVerifySignature","yParity","addn","e","fromTxData","accessListJSON","getAccessListJSON","baseTransaction_1"],"sourceRoot":"","sources":["../src/eip2930Transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}