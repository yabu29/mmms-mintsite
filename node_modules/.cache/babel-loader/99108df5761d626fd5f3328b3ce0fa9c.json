{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Base = void 0;\n\nconst buffer_1 = require(\"buffer\");\n\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\n\nclass Base {\n  /**\n   * print\n   * @desc Prints out a visual representation of the merkle tree.\n   * @example\n   *```js\n   *tree.print()\n   *```\n   */\n  print() {\n    Base.print(this);\n  }\n  /**\n   * bufferIndexOf\n   * @desc Returns the first index of which given buffer is found in array.\n   * @param {Buffer[]} haystack - Array of buffers.\n   * @param {Buffer} needle - Buffer to find.\n   * @return {Number} - Index number\n   *\n   * @example\n   * ```js\n   *const index = tree.bufferIndexOf(haystack, needle)\n   *```\n   */\n\n\n  _bufferIndexOf(array, element) {\n    for (let i = 0; i < array.length; i++) {\n      if (element.equals(array[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer|ArrayBuffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = MerkleTree.bufferify('0x1234')\n   *```\n   */\n\n\n  static bufferify(value) {\n    if (!buffer_1.Buffer.isBuffer(value)) {\n      // crypto-js support\n      if (typeof value === 'object' && value.words) {\n        return buffer_1.Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n      } else if (Base.isHexString(value)) {\n        return buffer_1.Buffer.from(value.replace(/^0x/, ''), 'hex');\n      } else if (typeof value === 'string') {\n        return buffer_1.Buffer.from(value);\n      } else if (typeof value === 'number') {\n        let s = value.toString();\n\n        if (s.length % 2) {\n          s = `0${s}`;\n        }\n\n        return buffer_1.Buffer.from(s, 'hex');\n      } else if (ArrayBuffer.isView(value)) {\n        return buffer_1.Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n      }\n    }\n\n    return value;\n  }\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n\n\n  static isHexString(v) {\n    return typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n  }\n  /**\n   * print\n   * @desc Prints out a visual representation of the given merkle tree.\n   * @param {Object} tree - Merkle tree instance.\n   * @return {String}\n   * @example\n   *```js\n   *MerkleTree.print(tree)\n   *```\n   */\n\n\n  static print(tree) {\n    console.log(tree.toString());\n  }\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = tree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n\n\n  bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Base.bufferToHex(value, withPrefix);\n  }\n  /**\n   * bufferToHex\n   * @desc Returns a hex string with 0x prefix for given buffer.\n   * @param {Buffer} value\n   * @return {String}\n   * @example\n   *```js\n   *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n   *```\n   */\n\n\n  static bufferToHex(value) {\n    let withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return `${withPrefix ? '0x' : ''}${(value || buffer_1.Buffer.alloc(0)).toString('hex')}`;\n  }\n  /**\n   * bufferify\n   * @desc Returns a buffer type for the given value.\n   * @param {String|Number|Object|Buffer} value\n   * @return {Buffer}\n   *\n   * @example\n   * ```js\n   *const buf = tree.bufferify('0x1234')\n   *```\n   */\n\n\n  bufferify(value) {\n    return Base.bufferify(value);\n  }\n  /**\n   * bufferifyFn\n   * @desc Returns a function that will bufferify the return value.\n   * @param {Function}\n   * @return {Function}\n   *\n   * @example\n   * ```js\n   *const fn = tree.bufferifyFn((value) => sha256(value))\n   *```\n   */\n\n\n  bufferifyFn(f) {\n    return value => {\n      const v = f(value);\n\n      if (buffer_1.Buffer.isBuffer(v)) {\n        return v;\n      }\n\n      if (this._isHexString(v)) {\n        return buffer_1.Buffer.from(v.replace('0x', ''), 'hex');\n      }\n\n      if (typeof v === 'string') {\n        return buffer_1.Buffer.from(v);\n      }\n\n      if (ArrayBuffer.isView(v)) {\n        return buffer_1.Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n      } // crypto-js support\n\n\n      return buffer_1.Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n    };\n  }\n  /**\n   * isHexString\n   * @desc Returns true if value is a hex string.\n   * @param {String} value\n   * @return {Boolean}\n   *\n   * @example\n   * ```js\n   *console.log(MerkleTree.isHexString('0x1234'))\n   *```\n   */\n\n\n  _isHexString(value) {\n    return Base.isHexString(value);\n  }\n  /**\n   * log2\n   * @desc Returns the log2 of number.\n   * @param {Number} value\n   * @return {Number}\n   */\n\n\n  _log2(n) {\n    return n === 1 ? 0 : 1 + this._log2(n / 2 | 0);\n  }\n  /**\n   * zip\n   * @desc Returns true if value is a hex string.\n   * @param {String[]|Number[]|Buffer[]} a - first array\n   * @param {String[]|Number[]|Buffer[]} b -  second array\n   * @return {String[][]|Number[][]|Buffer[][]}\n   *\n   * @example\n   * ```js\n   *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n   *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n   *```\n   */\n\n\n  _zip(a, b) {\n    return a.map((e, i) => [e, b[i]]);\n  }\n\n}\n\nexports.Base = Base;\nexports.default = Base;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Base","buffer_1","require","crypto_js_1","print","_bufferIndexOf","array","element","i","length","equals","bufferify","Buffer","isBuffer","words","from","toString","default","enc","Hex","isHexString","replace","s","ArrayBuffer","isView","buffer","byteOffset","byteLength","v","test","tree","console","log","bufferToHex","withPrefix","alloc","bufferifyFn","f","_isHexString","parse","_log2","n","_zip","a","b","map","e"],"sources":["/Users/yabuch/Desktop/オムニMMMS/shigo-gene-main-korekore/shigo_gene_minting_dapp/node_modules/merkletreejs/dist/Base.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Base = void 0;\nconst buffer_1 = require(\"buffer\");\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\nclass Base {\n    /**\n     * print\n     * @desc Prints out a visual representation of the merkle tree.\n     * @example\n     *```js\n     *tree.print()\n     *```\n     */\n    print() {\n        Base.print(this);\n    }\n    /**\n     * bufferIndexOf\n     * @desc Returns the first index of which given buffer is found in array.\n     * @param {Buffer[]} haystack - Array of buffers.\n     * @param {Buffer} needle - Buffer to find.\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.bufferIndexOf(haystack, needle)\n     *```\n     */\n    _bufferIndexOf(array, element) {\n        for (let i = 0; i < array.length; i++) {\n            if (element.equals(array[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer|ArrayBuffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = MerkleTree.bufferify('0x1234')\n     *```\n     */\n    static bufferify(value) {\n        if (!buffer_1.Buffer.isBuffer(value)) {\n            // crypto-js support\n            if (typeof value === 'object' && value.words) {\n                return buffer_1.Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n            }\n            else if (Base.isHexString(value)) {\n                return buffer_1.Buffer.from(value.replace(/^0x/, ''), 'hex');\n            }\n            else if (typeof value === 'string') {\n                return buffer_1.Buffer.from(value);\n            }\n            else if (typeof value === 'number') {\n                let s = value.toString();\n                if (s.length % 2) {\n                    s = `0${s}`;\n                }\n                return buffer_1.Buffer.from(s, 'hex');\n            }\n            else if (ArrayBuffer.isView(value)) {\n                return buffer_1.Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n            }\n        }\n        return value;\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    static isHexString(v) {\n        return (typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v));\n    }\n    /**\n     * print\n     * @desc Prints out a visual representation of the given merkle tree.\n     * @param {Object} tree - Merkle tree instance.\n     * @return {String}\n     * @example\n     *```js\n     *MerkleTree.print(tree)\n     *```\n     */\n    static print(tree) {\n        console.log(tree.toString());\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = tree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    bufferToHex(value, withPrefix = true) {\n        return Base.bufferToHex(value, withPrefix);\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    static bufferToHex(value, withPrefix = true) {\n        return `${withPrefix ? '0x' : ''}${(value || buffer_1.Buffer.alloc(0)).toString('hex')}`;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = tree.bufferify('0x1234')\n     *```\n     */\n    bufferify(value) {\n        return Base.bufferify(value);\n    }\n    /**\n     * bufferifyFn\n     * @desc Returns a function that will bufferify the return value.\n     * @param {Function}\n     * @return {Function}\n     *\n     * @example\n     * ```js\n     *const fn = tree.bufferifyFn((value) => sha256(value))\n     *```\n     */\n    bufferifyFn(f) {\n        return (value) => {\n            const v = f(value);\n            if (buffer_1.Buffer.isBuffer(v)) {\n                return v;\n            }\n            if (this._isHexString(v)) {\n                return buffer_1.Buffer.from(v.replace('0x', ''), 'hex');\n            }\n            if (typeof v === 'string') {\n                return buffer_1.Buffer.from(v);\n            }\n            if (ArrayBuffer.isView(v)) {\n                return buffer_1.Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n            }\n            // crypto-js support\n            return buffer_1.Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n        };\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    _isHexString(value) {\n        return Base.isHexString(value);\n    }\n    /**\n     * log2\n     * @desc Returns the log2 of number.\n     * @param {Number} value\n     * @return {Number}\n     */\n    _log2(n) {\n        return n === 1 ? 0 : 1 + this._log2((n / 2) | 0);\n    }\n    /**\n     * zip\n     * @desc Returns true if value is a hex string.\n     * @param {String[]|Number[]|Buffer[]} a - first array\n     * @param {String[]|Number[]|Buffer[]} b -  second array\n     * @return {String[][]|Number[][]|Buffer[][]}\n     *\n     * @example\n     * ```js\n     *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n     *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n     *```\n     */\n    _zip(a, b) {\n        return a.map((e, i) => [e, b[i]]);\n    }\n}\nexports.Base = Base;\nexports.default = Base;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}