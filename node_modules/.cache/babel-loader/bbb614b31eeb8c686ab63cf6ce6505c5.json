{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Convert BN to 0x-prefixed hex string.\n */\n\n\nfunction bnToHex(value) {\n  return \"0x\" + value.toString(16);\n}\n\nexports.bnToHex = bnToHex;\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\n\nfunction bnToUnpaddedBuffer(value) {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return bytes_1.unpadBuffer(value.toArrayLike(Buffer));\n}\n\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\n\nfunction bnToRlp(value) {\n  return bnToUnpaddedBuffer(value);\n}\n\nexports.bnToRlp = bnToRlp;\n/**\n * Type output options\n */\n\nvar TypeOutput;\n\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n  TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n/**\n * Convert an input to a specified type\n * @param input value to convert\n * @param outputType type to output\n */\n\n\nfunction toType(input, outputType) {\n  if (typeof input === 'string' && !ethjs_util_1.isHexString(input)) {\n    throw new Error(\"A string must be provided with a 0x-prefix, given: \" + input);\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n\n  input = bytes_1.toBuffer(input);\n\n  if (outputType === TypeOutput.Buffer) {\n    return input;\n  } else if (outputType === TypeOutput.BN) {\n    return new bn_js_1.default(input);\n  } else if (outputType === TypeOutput.Number) {\n    var bn = new bn_js_1.default(input);\n    var max = new bn_js_1.default(Number.MAX_SAFE_INTEGER.toString());\n\n    if (bn.gt(max)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n    }\n\n    return bn.toNumber();\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return \"0x\" + input.toString('hex');\n  }\n}\n\nexports.toType = toType;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;AA8CA;;;;;AAGA,SAAgBA,OAAhB,CAAwBC,KAAxB,EAAiC;EAC/B,OAAO,OAAKA,KAAK,CAACC,QAAN,CAAe,EAAf,CAAZ;AACD;;AAFDC;AAIA;;;;;;AAKA,SAAgBC,kBAAhB,CAAmCH,KAAnC,EAA4C;EAC1C;EACA;EACA,OAAOI,oBAAYJ,KAAK,CAACK,WAAN,CAAkBC,MAAlB,CAAZ,CAAP;AACD;;AAJDJ;AAMA;;;;;AAIA,SAAgBK,OAAhB,CAAwBP,KAAxB,EAAiC;EAC/B,OAAOG,kBAAkB,CAACH,KAAD,CAAzB;AACD;;AAFDE;AAIA;;;;AAGA,IAAYM,UAAZ;;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,UAAU,GAAVN,4CAAU,EAAV,CAAZ;AAcA;;;;;;;AAKA,SAAgBO,MAAhB,CACEC,KADF,EAEEC,UAFF,EAEe;EAEb,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,CAACE,yBAAYF,KAAZ,CAAlC,EAAsD;IACpD,MAAM,IAAIG,KAAJ,CAAU,wDAAsDH,KAAhE,CAAN;EACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACI,MAAM,CAACC,aAAP,CAAqBL,KAArB,CAAlC,EAA+D;IACpE,MAAM,IAAIG,KAAJ,CACJ,6FADI,CAAN;EAGD;;EAEDH,KAAK,GAAGN,iBAASM,KAAT,CAAR;;EAEA,IAAIC,UAAU,KAAKH,UAAU,CAACF,MAA9B,EAAsC;IACpC,OAAOI,KAAP;EACD,CAFD,MAEO,IAAIC,UAAU,KAAKH,UAAU,CAACQ,EAA9B,EAAkC;IACvC,OAAO,IAAIC,eAAJ,CAAOP,KAAP,CAAP;EACD,CAFM,MAEA,IAAIC,UAAU,KAAKH,UAAU,CAACM,MAA9B,EAAsC;IAC3C,IAAMI,EAAE,GAAG,IAAID,eAAJ,CAAOP,KAAP,CAAX;IACA,IAAMS,GAAG,GAAG,IAAIF,eAAJ,CAAOH,MAAM,CAACM,gBAAP,CAAwBnB,QAAxB,EAAP,CAAZ;;IACA,IAAIiB,EAAE,CAACG,EAAH,CAAMF,GAAN,CAAJ,EAAgB;MACd,MAAM,IAAIN,KAAJ,CACJ,8FADI,CAAN;IAGD;;IACD,OAAOK,EAAE,CAACI,QAAH,EAAP;EACD,CATM,MASA;IACL;IACA,OAAO,OAAKZ,KAAK,CAACT,QAAN,CAAe,KAAf,CAAZ;EACD;AACF;;AA/BDC","names":["bnToHex","value","toString","exports","bnToUnpaddedBuffer","bytes_1","toArrayLike","Buffer","bnToRlp","TypeOutput","toType","input","outputType","ethjs_util_1","Error","Number","isSafeInteger","BN","bn_js_1","bn","max","MAX_SAFE_INTEGER","gt","toNumber"],"sourceRoot":"","sources":["../src/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}