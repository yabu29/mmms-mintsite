{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n\nvar Transaction =\n/** @class */\nfunction (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n\n        var chainIdDoubled = _this.common.chainIdBN().muln(2); // v and chain ID meet EIP-155 conditions\n\n\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n\n\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n\n\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n\n\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    } // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n\n\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    var _a = __read(values, 9),\n        nonce = _a[0],\n        gasPrice = _a[1],\n        gasLimit = _a[2],\n        to = _a[3],\n        value = _a[4],\n        data = _a[5],\n        v = _a[6],\n        r = _a[7],\n        s = _a[8];\n\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For an unsigned legacy tx this method returns the the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned legacy tx this method uses the empty Buffer values\n   * for the signature parameters `v`, `r` and `s` for encoding. For an\n   * EIP-155 compliant representation use {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data];\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push(ethereumjs_util_1.toBuffer(this.common.chainIdBN()));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n      values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n    }\n\n    return values;\n  };\n\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var message = this._getMessageToSign();\n\n    if (hashMessage) {\n      return ethereumjs_util_1.rlphash(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  Transaction.prototype.hash = function () {\n    return ethereumjs_util_1.rlphash(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var message = this._getMessageToSign();\n\n    return ethereumjs_util_1.rlphash(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, v, ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n\n\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n\n    var opts = {\n      common: this.common\n    };\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n\n\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  Transaction.prototype._validateTxV = function (v, common) {\n    var chainIdBN; // No unsigned tx and EIP-155 activated and chain ID included\n\n    if (v !== undefined && !v.eqn(0) && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \" + v.toString() + \" and chain id \" + common.chainIdBN().toString() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        } // Use derived chain ID to create a proper Common\n\n\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      throw Error('This transaction is not signed');\n    }\n\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon'); // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","__extends","txData","opts","_super","type","_this","common","_validateTxV","v","gasPrice","ethereumjs_util_1","_validateCannotExceedMaxInteger","gteHardfork","isSigned","activeCapabilities","push","types_1","EIP155ReplayProtection","chainIdDoubled","chainIdBN","muln","eq","addn","freeze","_a","Object","Transaction","serialized","values","decode","Array","isArray","Error","fromValuesArray","fromSerializedTx","length","nonce","gasLimit","to","value","data","r","s","undefined","buf","Buffer","from","encode","raw","supports","hashMessage","message","_getMessageToSign","mul","add","msgHash","getMessageToVerifySignature","gt","e","vBN","iadd","fromTxData","toString","eqn","isValidEIP155V","numSub","subn","isEven","divn","_getCommon","onEIP155BlockOrLater","vAndChainIdMeetEIP155Conditions","baseTransaction_1"],"sourceRoot":"","sources":["../src/legacyTransaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}