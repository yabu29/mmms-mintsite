{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\n\nvar errors = require('web3-core-helpers').errors;\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar promiEvent = require('web3-core-promievent');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar EthersTransactionUtils = require('@ethersproject/transactions');\n\nvar Method = function Method(options) {\n  if (!options.call || !options.name) {\n    throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n  }\n\n  this.name = options.name;\n  this.call = options.call;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter;\n  this.outputFormatter = options.outputFormatter;\n  this.transformPayload = options.transformPayload;\n  this.extraFormatters = options.extraFormatters;\n  this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n\n  this.requestManager = options.requestManager; // reference to eth.accounts\n\n  this.accounts = options.accounts;\n  this.defaultBlock = options.defaultBlock || 'latest';\n  this.defaultAccount = options.defaultAccount || null;\n  this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n  this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n  this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n  this.defaultCommon = options.defaultCommon;\n  this.defaultChain = options.defaultChain;\n  this.defaultHardfork = options.defaultHardfork;\n  this.handleRevert = options.handleRevert;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n  this.requestManager = requestManager; // reference to eth.accounts\n\n  if (accounts) {\n    this.accounts = accounts;\n  }\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n  var func = this.buildCall();\n  func.call = this.call;\n  this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n  return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  func.call = this.call;\n  var name = this.name.split('.');\n\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\n\n\nMethod.prototype.getCall = function (args) {\n  return typeof this.call === 'function' ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\n\nMethod.prototype.extractCallback = function (args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nMethod.prototype.validateArgs = function (args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n  }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nMethod.prototype.formatInput = function (args) {\n  var _this = this;\n\n  if (!this.inputFormatter) {\n    return args;\n  }\n\n  return this.inputFormatter.map(function (formatter, index) {\n    // bind this for defaultBlock, and defaultAccount\n    return formatter ? formatter.call(_this, args[index]) : args[index];\n  });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\n\nMethod.prototype.formatOutput = function (result) {\n  var _this = this;\n\n  if (Array.isArray(result)) {\n    return result.map(function (res) {\n      return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n    });\n  } else {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n  }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nMethod.prototype.toPayload = function (args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var params = this.formatInput(args);\n  this.validateArgs(params);\n  var payload = {\n    method: call,\n    params: params,\n    callback: callback\n  };\n\n  if (this.transformPayload) {\n    payload = this.transformPayload(payload);\n  }\n\n  return payload;\n};\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n  var method = this,\n      promiseResolved = false,\n      canUnsubscribe = true,\n      timeoutCount = 0,\n      confirmationCount = 0,\n      intervalId = null,\n      lastBlock = null,\n      receiptJSON = '',\n      gasProvided = !!payload.params[0] && typeof payload.params[0] === 'object' && payload.params[0].gas ? payload.params[0].gas : null,\n      isContractDeployment = !!payload.params[0] && typeof payload.params[0] === 'object' && payload.params[0].data && payload.params[0].from && !payload.params[0].to,\n      hasBytecode = isContractDeployment && payload.params[0].data.length > 2; // add custom send Methods\n\n  var _ethereumCalls = [new Method({\n    name: 'getBlockByNumber',\n    call: 'eth_getBlockByNumber',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatters.outputBlockFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getTransactionByHash',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionFormatter\n  }), new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        subscriptionName: 'newHeads',\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      }\n    }\n  })]; // attach methods to this._ethereumCall\n\n  var _ethereumCall = {};\n\n  _ethereumCalls.forEach(mthd => {\n    mthd.attachToObject(_ethereumCall);\n    mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n  }); // fire \"receipt\" and confirmation events and resolve after\n\n\n  var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n    if (!err) {\n      // create fake unsubscribe\n      if (!sub) {\n        sub = {\n          unsubscribe: function () {\n            clearInterval(intervalId);\n          }\n        };\n      } // if we have a valid receipt we don't need to send a request\n\n\n      return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result) // catch error from requesting receipt\n      ).catch(function (err) {\n        sub.unsubscribe();\n        promiseResolved = true;\n\n        utils._fireError({\n          message: 'Failed to check for transaction receipt:',\n          data: err\n        }, defer.eventEmitter, defer.reject);\n      }) // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n      .then(async function (receipt) {\n        if (!receipt || !receipt.blockHash) {\n          throw new Error('Receipt missing or blockHash null');\n        } // apply extra formatters\n\n\n        if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n          receipt = method.extraFormatters.receiptFormatter(receipt);\n        } // check if confirmation listener exists\n\n\n        if (defer.eventEmitter.listeners('confirmation').length > 0) {\n          var block; // If there was an immediately retrieved receipt, it's already\n          // been confirmed by the direct call to checkConfirmation needed\n          // for parity instant-seal\n\n          if (existingReceipt === undefined || confirmationCount !== 0) {\n            // Get latest block to emit with confirmation\n            var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n            var latestBlockHash = latestBlock ? latestBlock.hash : null;\n\n            if (isPolling) {\n              // Check if actually a new block is existing on polling\n              if (lastBlock) {\n                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n\n                if (block) {\n                  lastBlock = block;\n                  defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                }\n              } else {\n                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                lastBlock = block;\n                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n              }\n            } else {\n              defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n            }\n          }\n\n          if (isPolling && block || !isPolling) {\n            confirmationCount++;\n          }\n\n          canUnsubscribe = false;\n\n          if (confirmationCount === method.transactionConfirmationBlocks + 1) {\n            // add 1 so we account for conf 0\n            sub.unsubscribe();\n            defer.eventEmitter.removeAllListeners();\n          }\n        }\n\n        return receipt;\n      }) // CHECK for CONTRACT DEPLOYMENT\n      .then(async function (receipt) {\n        if (isContractDeployment && !promiseResolved) {\n          if (!receipt.contractAddress) {\n            if (canUnsubscribe) {\n              sub.unsubscribe();\n              promiseResolved = true;\n            }\n\n            utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n            return;\n          }\n\n          var code;\n\n          try {\n            code = await _ethereumCall.getCode(receipt.contractAddress);\n          } catch (err) {// ignore;\n          }\n\n          if (!code) {\n            return;\n          } // If deployment is status.true and there was a real\n          // bytecode string, assume it was successful.\n\n\n          var deploymentSuccess = receipt.status === true && hasBytecode;\n\n          if (deploymentSuccess || code.length > 2) {\n            defer.eventEmitter.emit('receipt', receipt); // if contract, return instance instead of receipt\n\n            if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n              defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n            } else {\n              defer.resolve(receipt);\n            } // need to remove listeners, as they aren't removed automatically when succesfull\n\n\n            if (canUnsubscribe) {\n              defer.eventEmitter.removeAllListeners();\n            }\n          } else {\n            utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n          }\n\n          if (canUnsubscribe) {\n            sub.unsubscribe();\n          }\n\n          promiseResolved = true;\n        }\n\n        return receipt;\n      }) // CHECK for normal tx check for receipt only\n      .then(async function (receipt) {\n        if (!isContractDeployment && !promiseResolved) {\n          if (!receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n            defer.eventEmitter.emit('receipt', receipt);\n            defer.resolve(receipt); // need to remove listeners, as they aren't removed automatically when succesfull\n\n            if (canUnsubscribe) {\n              defer.eventEmitter.removeAllListeners();\n            }\n          } else {\n            receiptJSON = JSON.stringify(receipt, null, 2);\n\n            if (receipt.status === false || receipt.status === '0x0') {\n              try {\n                var revertMessage = null;\n\n                if (method.handleRevert && (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                  var txReplayOptions = payload.params[0]; // If send was raw, fetch the transaction and reconstitute the\n                  // original params so they can be replayed with `eth_call`\n\n                  if (method.call === 'eth_sendRawTransaction') {\n                    var rawTransactionHex = payload.params[0];\n                    var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                    txReplayOptions = formatters.inputTransactionFormatter({\n                      data: parsedTx.data,\n                      to: parsedTx.to,\n                      from: parsedTx.from,\n                      gas: parsedTx.gasLimit.toHexString(),\n                      gasPrice: parsedTx.gasPrice.toHexString(),\n                      value: parsedTx.value.toHexString()\n                    });\n                  } // Get revert reason string with eth_call\n\n\n                  revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n\n                  if (revertMessage) {\n                    // Only throw a revert error if a revert reason is existing\n                    utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                  } else {\n                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                  }\n                } else {\n                  throw false; // Throw false and let the try/catch statement handle the error correctly after\n                }\n              } catch (error) {\n                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n              }\n            } else {\n              // Throw OOG if status is not existing and provided gas and used gas are equal\n              utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n            }\n          }\n\n          if (canUnsubscribe) {\n            sub.unsubscribe();\n          }\n\n          promiseResolved = true;\n        }\n      }) // time out the transaction if not mined after 50 blocks\n      .catch(function () {\n        timeoutCount++; // check to see if we are http polling\n\n        if (!!isPolling) {\n          // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n          if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        } else {\n          if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        }\n      });\n    } else {\n      sub.unsubscribe();\n      promiseResolved = true;\n\n      utils._fireError({\n        message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n        data: err\n      }, defer.eventEmitter, defer.reject);\n    }\n  }; // start watching for confirmation depending on the support features of the provider\n\n\n  var startWatching = function (existingReceipt) {\n    const startInterval = () => {\n      intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n    };\n\n    if (!this.requestManager.provider.on) {\n      startInterval();\n    } else {\n      _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n        if (err || !blockHeader) {\n          // fall back to polling\n          startInterval();\n        } else {\n          checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n        }\n      });\n    }\n  }.bind(this); // first check if we already have a confirmed transaction\n\n\n  _ethereumCall.getTransactionReceipt(result).then(function (receipt) {\n    if (receipt && receipt.blockHash) {\n      if (defer.eventEmitter.listeners('confirmation').length > 0) {\n        // We must keep on watching for new Blocks, if a confirmation listener is present\n        startWatching(receipt);\n      }\n\n      checkConfirmation(receipt, false);\n    } else if (!promiseResolved) {\n      startWatching();\n    }\n  }).catch(function () {\n    if (!promiseResolved) startWatching();\n  });\n};\n\nvar getWallet = function (from, accounts) {\n  var wallet = null; // is index given\n\n  if (typeof from === 'number') {\n    wallet = accounts.wallet[from]; // is account given\n  } else if (!!from && typeof from === 'object' && from.address && from.privateKey) {\n    wallet = from; // search in wallet for address\n  } else {\n    wallet = accounts.wallet[from.toLowerCase()];\n  }\n\n  return wallet;\n};\n\nMethod.prototype.buildCall = function () {\n  var method = this,\n      isSendTx = method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction',\n      // || method.call === 'personal_sendTransaction'\n  isCall = method.call === 'eth_call'; // actual send function\n\n  var send = function () {\n    var defer = promiEvent(!isSendTx),\n        payload = method.toPayload(Array.prototype.slice.call(arguments)); // CALLBACK function\n\n    var sendTxCallback = function (err, result) {\n      if (method.handleRevert && isCall && method.abiCoder) {\n        var reasonData; // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n        // Geth >= 1.9.15 attaches the reason data to an error object.\n        // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n\n        if (!err && method.isRevertReasonString(result)) {\n          reasonData = result.substring(10);\n        } else if (err && err.data) {\n          reasonData = err.data.substring(10);\n        }\n\n        if (reasonData) {\n          var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n          var signature = 'Error(String)';\n\n          utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n            reason: reason,\n            signature: signature\n          });\n\n          return;\n        }\n      }\n\n      try {\n        result = method.formatOutput(result);\n      } catch (e) {\n        err = e;\n      }\n\n      if (result instanceof Error) {\n        err = result;\n      }\n\n      if (!err) {\n        if (payload.callback) {\n          payload.callback(null, result);\n        }\n      } else {\n        if (err.error) {\n          err = err.error;\n        }\n\n        return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n      } // return PROMISE\n\n\n      if (!isSendTx) {\n        if (!err) {\n          defer.resolve(result);\n        } // return PROMIEVENT\n\n      } else {\n        defer.eventEmitter.emit('transactionHash', result);\n\n        method._confirmTransaction(defer, result, payload);\n      }\n    }; // SENDS the SIGNED SIGNATURE\n\n\n    var sendSignedTx = function (sign) {\n      var signedPayload = { ...payload,\n        method: 'eth_sendRawTransaction',\n        params: [sign.rawTransaction]\n      };\n      method.requestManager.send(signedPayload, sendTxCallback);\n    };\n\n    var sendRequest = function (payload, method) {\n      if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n        var wallet; // ETH_SENDTRANSACTION\n\n        if (payload.method === 'eth_sendTransaction') {\n          var tx = payload.params[0];\n          wallet = getWallet(!!tx && typeof tx === 'object' ? tx.from : null, method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var tx = JSON.parse(JSON.stringify(tx));\n            delete tx.from;\n\n            if (method.defaultChain && !tx.chain) {\n              tx.chain = method.defaultChain;\n            }\n\n            if (method.defaultHardfork && !tx.hardfork) {\n              tx.hardfork = method.defaultHardfork;\n            }\n\n            if (method.defaultCommon && !tx.common) {\n              tx.common = method.defaultCommon;\n            }\n\n            method.accounts.signTransaction(tx, wallet.privateKey).then(sendSignedTx).catch(function (err) {\n              if (typeof defer.eventEmitter.listeners === 'function' && defer.eventEmitter.listeners('error').length) {\n                try {\n                  defer.eventEmitter.emit('error', err);\n                } catch (err) {// Ignore userland error prevent it to bubble up within web3.\n                }\n\n                defer.eventEmitter.removeAllListeners();\n                defer.eventEmitter.catch(function () {});\n              }\n\n              defer.reject(err);\n            });\n            return;\n          } // ETH_SIGN\n\n        } else if (payload.method === 'eth_sign') {\n          var data = payload.params[1];\n          wallet = getWallet(payload.params[0], method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var sign = method.accounts.sign(data, wallet.privateKey);\n\n            if (payload.callback) {\n              payload.callback(null, sign.signature);\n            }\n\n            defer.resolve(sign.signature);\n            return;\n          }\n        }\n      }\n\n      return method.requestManager.send(payload, sendTxCallback);\n    }; // Send the actual transaction\n\n\n    if (isSendTx && !!payload.params[0] && typeof payload.params[0] === 'object' && typeof payload.params[0].gasPrice === 'undefined' && (typeof payload.params[0].maxPriorityFeePerGas === 'undefined' || typeof payload.params[0].maxFeePerGas === 'undefined')) {\n      _handleTxPricing(method, payload.params[0]).then(txPricing => {\n        if (txPricing.gasPrice !== undefined) {\n          payload.params[0].gasPrice = txPricing.gasPrice;\n        } else if (txPricing.maxPriorityFeePerGas !== undefined && txPricing.maxFeePerGas !== undefined) {\n          payload.params[0].maxPriorityFeePerGas = txPricing.maxPriorityFeePerGas;\n          payload.params[0].maxFeePerGas = txPricing.maxFeePerGas;\n        }\n\n        if (isSendTx) {\n          setTimeout(() => {\n            defer.eventEmitter.emit('sending', payload);\n          }, 0);\n        }\n\n        sendRequest(payload, method);\n      });\n    } else {\n      if (isSendTx) {\n        setTimeout(() => {\n          defer.eventEmitter.emit('sending', payload);\n        }, 0);\n      }\n\n      sendRequest(payload, method);\n    }\n\n    if (isSendTx) {\n      setTimeout(() => {\n        defer.eventEmitter.emit('sent', payload);\n      }, 0);\n    }\n\n    return defer.eventEmitter;\n  }; // necessary to attach things to the method\n\n\n  send.method = method; // necessary for batch requests\n\n  send.request = this.request.bind(this);\n  return send;\n};\n\nfunction _handleTxPricing(method, tx) {\n  return new Promise((resolve, reject) => {\n    try {\n      var getBlockByNumber = new Method({\n        name: 'getBlockByNumber',\n        call: 'eth_getBlockByNumber',\n        params: 2,\n        inputFormatter: [function (blockNumber) {\n          return blockNumber ? utils.toHex(blockNumber) : 'latest';\n        }, function () {\n          return false;\n        }]\n      }).createFunction(method.requestManager);\n      var getGasPrice = new Method({\n        name: 'getGasPrice',\n        call: 'eth_gasPrice',\n        params: 0\n      }).createFunction(method.requestManager);\n      Promise.all([getBlockByNumber(), getGasPrice()]).then(responses => {\n        const [block, gasPrice] = responses;\n\n        if ((tx.type === '0x2' || tx.type === undefined) && block && block.baseFeePerGas) {\n          // The network supports EIP-1559\n          // Taken from https://github.com/ethers-io/ethers.js/blob/ba6854bdd5a912fe873d5da494cb5c62c190adde/packages/abstract-provider/src.ts/index.ts#L230\n          let maxPriorityFeePerGas, maxFeePerGas;\n\n          if (tx.gasPrice) {\n            // Using legacy gasPrice property on an eip-1559 network,\n            // so use gasPrice as both fee properties\n            maxPriorityFeePerGas = tx.gasPrice;\n            maxFeePerGas = tx.gasPrice;\n            delete tx.gasPrice;\n          } else {\n            maxPriorityFeePerGas = tx.maxPriorityFeePerGas || '0x9502F900'; // 2.5 Gwei\n\n            maxFeePerGas = tx.maxFeePerGas || utils.toHex(utils.toBN(block.baseFeePerGas).mul(utils.toBN(2)).add(utils.toBN(maxPriorityFeePerGas)));\n          }\n\n          resolve({\n            maxFeePerGas,\n            maxPriorityFeePerGas\n          });\n        } else {\n          if (tx.maxPriorityFeePerGas || tx.maxFeePerGas) throw Error(\"Network doesn't support eip-1559\");\n          resolve({\n            gasPrice\n          });\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\n\n\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    new Method({\n      name: 'call',\n      call: 'eth_call',\n      params: 2,\n      abiCoder: self.abiCoder,\n      handleRevert: true\n    }).createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber)).then(function () {\n      resolve(false);\n    }).catch(function (error) {\n      if (error.reason) {\n        resolve({\n          reason: error.reason,\n          signature: error.signature\n        });\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\n\n\nMethod.prototype.isRevertReasonString = function (data) {\n  return typeof data === 'string' && (data.length - 2) / 2 % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\n\n\nMethod.prototype.request = function () {\n  var payload = this.toPayload(Array.prototype.slice.call(arguments));\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n};\n\nmodule.exports = Method;","map":{"version":3,"names":["errors","require","formatters","utils","promiEvent","Subscriptions","subscriptions","EthersTransactionUtils","Method","options","call","name","Error","params","inputFormatter","outputFormatter","transformPayload","extraFormatters","abiCoder","requestManager","accounts","defaultBlock","defaultAccount","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","defaultCommon","defaultChain","defaultHardfork","handleRevert","prototype","setRequestManager","createFunction","func","buildCall","attachToObject","obj","split","length","getCall","args","extractCallback","pop","validateArgs","InvalidNumberOfParams","formatInput","_this","map","formatter","index","formatOutput","result","Array","isArray","res","toPayload","callback","payload","method","_confirmTransaction","defer","promiseResolved","canUnsubscribe","timeoutCount","confirmationCount","intervalId","lastBlock","receiptJSON","gasProvided","gas","isContractDeployment","data","from","to","hasBytecode","_ethereumCalls","inputBlockNumberFormatter","val","outputBlockFormatter","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","outputTransactionFormatter","type","subscriptionName","_ethereumCall","forEach","mthd","checkConfirmation","existingReceipt","isPolling","err","blockHeader","sub","unsubscribe","clearInterval","resolve","getTransactionReceipt","catch","_fireError","message","eventEmitter","reject","then","receipt","blockHash","receiptFormatter","listeners","block","undefined","latestBlock","getBlockByNumber","latestBlockHash","hash","number","emit","blockNumber","removeAllListeners","contractAddress","NoContractAddressFoundError","code","getCode","deploymentSuccess","status","contractDeployFormatter","ContractCodeNotStoredError","outOfGas","gasUsed","JSON","stringify","revertMessage","txReplayOptions","rawTransactionHex","parsedTx","parse","inputTransactionFormatter","gasLimit","toHexString","gasPrice","value","getRevertReason","TransactionRevertInstructionError","reason","signature","error","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","TransactionError","startWatching","startInterval","setInterval","bind","provider","on","subscribe","getWallet","wallet","address","privateKey","toLowerCase","isSendTx","isCall","send","slice","arguments","sendTxCallback","reasonData","isRevertReasonString","substring","decodeParameter","RevertInstructionError","e","sendSignedTx","sign","signedPayload","rawTransaction","sendRequest","tx","chain","hardfork","common","signTransaction","maxPriorityFeePerGas","maxFeePerGas","_handleTxPricing","txPricing","setTimeout","request","Promise","toHex","getGasPrice","all","responses","baseFeePerGas","toBN","mul","add","txOptions","self","numberToHex","format","module","exports"],"sources":["/Users/yabuch/Desktop/オムニMMMS/shigo-gene-main/shigo_gene_minting_dapp/node_modules/web3-core-method/lib/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar EthersTransactionUtils = require('@ethersproject/transactions');\nvar Method = function Method(options) {\n    if (!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n    this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n    this.requestManager = options.requestManager;\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n    this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n    this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n    this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n    this.defaultCommon = options.defaultCommon;\n    this.defaultChain = options.defaultChain;\n    this.defaultHardfork = options.defaultHardfork;\n    this.handleRevert = options.handleRevert;\n};\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n};\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n    return func;\n};\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    }\n    else {\n        obj[name[0]] = func;\n    }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return typeof this.call === 'function' ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (typeof (args[args.length - 1]) === 'function') {\n        return args.pop(); // modify the args array!\n    }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n    if (!this.inputFormatter) {\n        return args;\n    }\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n    if (Array.isArray(result)) {\n        return result.map(function (res) {\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    }\n    else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n    return payload;\n};\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this, promiseResolved = false, canUnsubscribe = true, timeoutCount = 0, confirmationCount = 0, intervalId = null, lastBlock = null, receiptJSON = '', gasProvided = ((!!payload.params[0] && typeof payload.params[0] === 'object') && payload.params[0].gas) ? payload.params[0].gas : null, isContractDeployment = (!!payload.params[0] && typeof payload.params[0] === 'object') &&\n        payload.params[0].data &&\n        payload.params[0].from &&\n        !payload.params[0].to, hasBytecode = isContractDeployment && payload.params[0].data.length > 2;\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getBlockByNumber',\n            call: 'eth_getBlockByNumber',\n            params: 2,\n            inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n                    return !!val;\n                }],\n            outputFormatter: formatters.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getTransactionByHash',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionFormatter\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads',\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _ethereumCalls.forEach(mthd => {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n                // catch error from requesting receipt\n                .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({\n                    message: 'Failed to check for transaction receipt:',\n                    data: err\n                }, defer.eventEmitter, defer.reject);\n            })\n                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n                .then(async function (receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                    var block;\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0) {\n                        // Get latest block to emit with confirmation\n                        var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n                        var latestBlockHash = latestBlock ? latestBlock.hash : null;\n                        if (isPolling) { // Check if actually a new block is existing on polling\n                            if (lastBlock) {\n                                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n                                if (block) {\n                                    lastBlock = block;\n                                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                                }\n                            }\n                            else {\n                                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                                lastBlock = block;\n                                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                            }\n                        }\n                        else {\n                            defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                        }\n                    }\n                    if ((isPolling && block) || !isPolling) {\n                        confirmationCount++;\n                    }\n                    canUnsubscribe = false;\n                    if (confirmationCount === method.transactionConfirmationBlocks + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n                return receipt;\n            })\n                // CHECK for CONTRACT DEPLOYMENT\n                .then(async function (receipt) {\n                if (isContractDeployment && !promiseResolved) {\n                    if (!receipt.contractAddress) {\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n                        utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        return;\n                    }\n                    var code;\n                    try {\n                        code = await _ethereumCall.getCode(receipt.contractAddress);\n                    }\n                    catch (err) {\n                        // ignore;\n                    }\n                    if (!code) {\n                        return;\n                    }\n                    // If deployment is status.true and there was a real\n                    // bytecode string, assume it was successful.\n                    var deploymentSuccess = receipt.status === true && hasBytecode;\n                    if (deploymentSuccess || code.length > 2) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        // if contract, return instance instead of receipt\n                        if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                            defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                        }\n                        else {\n                            defer.resolve(receipt);\n                        }\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n                return receipt;\n            })\n                // CHECK for normal tx check for receipt only\n                .then(async function (receipt) {\n                if (!isContractDeployment && !promiseResolved) {\n                    if (!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        receiptJSON = JSON.stringify(receipt, null, 2);\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            try {\n                                var revertMessage = null;\n                                if (method.handleRevert &&\n                                    (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                                    var txReplayOptions = payload.params[0];\n                                    // If send was raw, fetch the transaction and reconstitute the\n                                    // original params so they can be replayed with `eth_call`\n                                    if (method.call === 'eth_sendRawTransaction') {\n                                        var rawTransactionHex = payload.params[0];\n                                        var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                                        txReplayOptions = formatters.inputTransactionFormatter({\n                                            data: parsedTx.data,\n                                            to: parsedTx.to,\n                                            from: parsedTx.from,\n                                            gas: parsedTx.gasLimit.toHexString(),\n                                            gasPrice: parsedTx.gasPrice.toHexString(),\n                                            value: parsedTx.value.toHexString()\n                                        });\n                                    }\n                                    // Get revert reason string with eth_call\n                                    revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n                                    if (revertMessage) { // Only throw a revert error if a revert reason is existing\n                                        utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                                    }\n                                    else {\n                                        throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                    }\n                                }\n                                else {\n                                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                }\n                            }\n                            catch (error) {\n                                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                            }\n                        }\n                        else {\n                            // Throw OOG if status is not existing and provided gas and used gas are equal\n                            utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        }\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n            })\n                // time out the transaction if not mined after 50 blocks\n                .catch(function () {\n                timeoutCount++;\n                // check to see if we are http polling\n                if (!!isPolling) {\n                    // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n                    if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n                else {\n                    if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n        }\n        else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err\n            }, defer.eventEmitter, defer.reject);\n        }\n    };\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function (existingReceipt) {\n        const startInterval = () => {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        };\n        if (!this.requestManager.provider.on) {\n            startInterval();\n        }\n        else {\n            _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n                if (err || !blockHeader) {\n                    // fall back to polling\n                    startInterval();\n                }\n                else {\n                    checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n                }\n            });\n        }\n    }.bind(this);\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n        .then(function (receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n        }\n        else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n        .catch(function () {\n        if (!promiseResolved)\n            startWatching();\n    });\n};\nvar getWallet = function (from, accounts) {\n    var wallet = null;\n    // is index given\n    if (typeof from === 'number') {\n        wallet = accounts.wallet[from];\n        // is account given\n    }\n    else if (!!from && typeof from === 'object' && from.address && from.privateKey) {\n        wallet = from;\n        // search in wallet for address\n    }\n    else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n    return wallet;\n};\nMethod.prototype.buildCall = function () {\n    var method = this, isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'), // || method.call === 'personal_sendTransaction'\n    isCall = (method.call === 'eth_call');\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx), payload = method.toPayload(Array.prototype.slice.call(arguments));\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            if (method.handleRevert && isCall && method.abiCoder) {\n                var reasonData;\n                // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n                // Geth >= 1.9.15 attaches the reason data to an error object.\n                // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n                if (!err && method.isRevertReasonString(result)) {\n                    reasonData = result.substring(10);\n                }\n                else if (err && err.data) {\n                    reasonData = err.data.substring(10);\n                }\n                if (reasonData) {\n                    var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n                    var signature = 'Error(String)';\n                    utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n                        reason: reason,\n                        signature: signature\n                    });\n                    return;\n                }\n            }\n            try {\n                result = method.formatOutput(result);\n            }\n            catch (e) {\n                err = e;\n            }\n            if (result instanceof Error) {\n                err = result;\n            }\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            }\n            else {\n                if (err.error) {\n                    err = err.error;\n                }\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n            // return PROMISE\n            if (!isSendTx) {\n                if (!err) {\n                    defer.resolve(result);\n                }\n                // return PROMIEVENT\n            }\n            else {\n                defer.eventEmitter.emit('transactionHash', result);\n                method._confirmTransaction(defer, result, payload);\n            }\n        };\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function (sign) {\n            var signedPayload = { ...payload,\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            };\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n        var sendRequest = function (payload, method) {\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((!!tx && typeof tx === 'object') ? tx.from : null, method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var tx = JSON.parse(JSON.stringify(tx));\n                        delete tx.from;\n                        if (method.defaultChain && !tx.chain) {\n                            tx.chain = method.defaultChain;\n                        }\n                        if (method.defaultHardfork && !tx.hardfork) {\n                            tx.hardfork = method.defaultHardfork;\n                        }\n                        if (method.defaultCommon && !tx.common) {\n                            tx.common = method.defaultCommon;\n                        }\n                        method.accounts.signTransaction(tx, wallet.privateKey)\n                            .then(sendSignedTx)\n                            .catch(function (err) {\n                            if (typeof defer.eventEmitter.listeners === 'function' && defer.eventEmitter.listeners('error').length) {\n                                try {\n                                    defer.eventEmitter.emit('error', err);\n                                }\n                                catch (err) {\n                                    // Ignore userland error prevent it to bubble up within web3.\n                                }\n                                defer.eventEmitter.removeAllListeners();\n                                defer.eventEmitter.catch(function () {\n                                });\n                            }\n                            defer.reject(err);\n                        });\n                        return;\n                    }\n                    // ETH_SIGN\n                }\n                else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n                }\n            }\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n        // Send the actual transaction\n        if (isSendTx\n            && !!payload.params[0]\n            && typeof payload.params[0] === 'object'\n            && (typeof payload.params[0].gasPrice === 'undefined'\n                && (typeof payload.params[0].maxPriorityFeePerGas === 'undefined'\n                    || typeof payload.params[0].maxFeePerGas === 'undefined'))) {\n            _handleTxPricing(method, payload.params[0]).then(txPricing => {\n                if (txPricing.gasPrice !== undefined) {\n                    payload.params[0].gasPrice = txPricing.gasPrice;\n                }\n                else if (txPricing.maxPriorityFeePerGas !== undefined\n                    && txPricing.maxFeePerGas !== undefined) {\n                    payload.params[0].maxPriorityFeePerGas = txPricing.maxPriorityFeePerGas;\n                    payload.params[0].maxFeePerGas = txPricing.maxFeePerGas;\n                }\n                if (isSendTx) {\n                    setTimeout(() => {\n                        defer.eventEmitter.emit('sending', payload);\n                    }, 0);\n                }\n                sendRequest(payload, method);\n            });\n        }\n        else {\n            if (isSendTx) {\n                setTimeout(() => {\n                    defer.eventEmitter.emit('sending', payload);\n                }, 0);\n            }\n            sendRequest(payload, method);\n        }\n        if (isSendTx) {\n            setTimeout(() => {\n                defer.eventEmitter.emit('sent', payload);\n            }, 0);\n        }\n        return defer.eventEmitter;\n    };\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\nfunction _handleTxPricing(method, tx) {\n    return new Promise((resolve, reject) => {\n        try {\n            var getBlockByNumber = (new Method({\n                name: 'getBlockByNumber',\n                call: 'eth_getBlockByNumber',\n                params: 2,\n                inputFormatter: [function (blockNumber) {\n                        return blockNumber ? utils.toHex(blockNumber) : 'latest';\n                    }, function () {\n                        return false;\n                    }]\n            })).createFunction(method.requestManager);\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n            Promise.all([\n                getBlockByNumber(),\n                getGasPrice()\n            ]).then(responses => {\n                const [block, gasPrice] = responses;\n                if ((tx.type === '0x2' || tx.type === undefined) &&\n                    (block && block.baseFeePerGas)) {\n                    // The network supports EIP-1559\n                    // Taken from https://github.com/ethers-io/ethers.js/blob/ba6854bdd5a912fe873d5da494cb5c62c190adde/packages/abstract-provider/src.ts/index.ts#L230\n                    let maxPriorityFeePerGas, maxFeePerGas;\n                    if (tx.gasPrice) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        maxPriorityFeePerGas = tx.gasPrice;\n                        maxFeePerGas = tx.gasPrice;\n                        delete tx.gasPrice;\n                    }\n                    else {\n                        maxPriorityFeePerGas = tx.maxPriorityFeePerGas || '0x9502F900'; // 2.5 Gwei\n                        maxFeePerGas = tx.maxFeePerGas ||\n                            utils.toHex(utils.toBN(block.baseFeePerGas)\n                                .mul(utils.toBN(2))\n                                .add(utils.toBN(maxPriorityFeePerGas)));\n                    }\n                    resolve({ maxFeePerGas, maxPriorityFeePerGas });\n                }\n                else {\n                    if (tx.maxPriorityFeePerGas || tx.maxFeePerGas)\n                        throw Error(\"Network doesn't support eip-1559\");\n                    resolve({ gasPrice });\n                }\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        (new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            abiCoder: self.abiCoder,\n            handleRevert: true\n        }))\n            .createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber))\n            .then(function () {\n            resolve(false);\n        })\n            .catch(function (error) {\n            if (error.reason) {\n                resolve({\n                    reason: error.reason,\n                    signature: error.signature\n                });\n            }\n            else {\n                reject(error);\n            }\n        });\n    });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\nMethod.prototype.isRevertReasonString = function (data) {\n    return typeof data === 'string' && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\nmodule.exports = Method;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}