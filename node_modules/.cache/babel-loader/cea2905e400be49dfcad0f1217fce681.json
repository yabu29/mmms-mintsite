{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n\nvar FeeMarketEIP1559Transaction =\n/** @class */\nfunction (_super) {\n  __extends(FeeMarketEIP1559Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function FeeMarketEIP1559Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a, _b;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n\n    _this.DEFAULT_HARDFORK = 'london';\n    var chainId = txData.chainId,\n        accessList = txData.accessList,\n        maxFeePerGas = txData.maxFeePerGas,\n        maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN();\n\n    if (!_this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n\n    _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]); // Populate the access list fields\n\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.maxFeePerGas = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    _this.maxPriorityFeePerGas = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n\n    _this._validateCannotExceedMaxInteger({\n      maxFeePerGas: _this.maxFeePerGas,\n      maxPriorityFeePerGas: _this.maxPriorityFeePerGas\n    }, 256);\n\n    if (_this.maxFeePerGas.lt(_this.maxPriorityFeePerGas)) {\n      throw new Error('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n    }\n\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      throw new Error('The y-parity of the transaction should either be 0 or 1');\n    }\n\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderR\", {\n    /**\n     * EIP-2930 alias for `r`\n     *\n     * @deprecated use `r` instead\n     */\n    get: function () {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"senderS\", {\n    /**\n     * EIP-2930 alias for `s`\n     *\n     * @deprecated use `s` instead\n     */\n    get: function () {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FeeMarketEIP1559Transaction.prototype, \"yParity\", {\n    /**\n     * EIP-2930 alias for `v`\n     *\n     * @deprecated use `v` instead\n     */\n    get: function () {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n\n  FeeMarketEIP1559Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new FeeMarketEIP1559Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n\n\n  FeeMarketEIP1559Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized.slice(0, 1).toString('hex'));\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n\n\n  FeeMarketEIP1559Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n\n\n  FeeMarketEIP1559Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n    }\n\n    var _a = __read(values, 12),\n        chainId = _a[0],\n        nonce = _a[1],\n        maxPriorityFeePerGas = _a[2],\n        maxFeePerGas = _a[3],\n        gasLimit = _a[4],\n        to = _a[5],\n        value = _a[6],\n        data = _a[7],\n        accessList = _a[8],\n        v = _a[9],\n        r = _a[10],\n        s = _a[11];\n\n    return new FeeMarketEIP1559Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      maxPriorityFeePerGas: maxPriorityFeePerGas,\n      maxFeePerGas: maxFeePerGas,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getDataFee = function () {\n    var cost = _super.prototype.getDataFee.call(this);\n\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    return cost;\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getUpfrontCost = function (baseFee) {\n    if (baseFee === void 0) {\n      baseFee = new ethereumjs_util_1.BN(0);\n    }\n\n    var inclusionFeePerGas = ethereumjs_util_1.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee));\n    var gasPrice = inclusionFeePerGas.add(baseFee);\n    return this.gasLimit.mul(gasPrice).add(this.value);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId), ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.maxPriorityFeePerGas), ethereumjs_util_1.bnToUnpaddedBuffer(this.maxFeePerGas), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.accessList, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceeding and concatenated to\n   * the RLP encoding of the values.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n\n  FeeMarketEIP1559Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var base = this.raw().slice(0, 9);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n\n    if (hashMessage) {\n      return ethereumjs_util_1.keccak256(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      throw new Error('Cannot call hash method if transaction is not signed');\n    }\n\n    return ethereumjs_util_1.keccak256(this.serialize());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      throw new Error('Cannot call this method if transaction is not signed');\n    }\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, v.addn(27), // Recover the 27 which was stripped from ecsign\n      ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n\n  FeeMarketEIP1559Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return FeeMarketEIP1559Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      maxFeePerGas: this.maxFeePerGas,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n\n\n  FeeMarketEIP1559Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: ethereumjs_util_1.bnToHex(this.chainId),\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      maxPriorityFeePerGas: ethereumjs_util_1.bnToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: ethereumjs_util_1.bnToHex(this.maxFeePerGas),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n\n  return FeeMarketEIP1559Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = FeeMarketEIP1559Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","TRANSACTION_TYPE_BUFFER","Buffer","from","toString","padStart","__extends","txData","opts","_super","type","_this","accessList","maxFeePerGas","maxPriorityFeePerGas","common","_getCommon","chainId","chainIdBN","isActivatedEIP","Error","activeCapabilities","concat","accessListData","util_1","getAccessListData","AccessListJSON","verifyAccessList","ethereumjs_util_1","_validateCannotExceedMaxInteger","lt","v","eqn","gteHardfork","s","_a","gt","types_1","freeze","_b","Object","FeeMarketEIP1559Transaction","r","serialized","slice","equals","values","decode","Array","isArray","fromValuesArray","fromSerializedTx","length","nonce","gasLimit","to","value","data","undefined","cost","getDataFee","call","iaddn","getDataFeeEIP2930","baseFee","inclusionFeePerGas","min","sub","gasPrice","add","mul","buf","base","raw","encode","hashMessage","message","isSigned","serialize","getMessageToSign","msgHash","getMessageToVerifySignature","addn","e","fromTxData","accessListJSON","getAccessListJSON","baseTransaction_1"],"sourceRoot":"","sources":["../src/eip1559Transaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}